class Solution {
public:
    string lcs(string s1, string s2, int n , int m )
    { 
        //find the longest common subseq using dp approach
        int dp[n+1][m+1];
        memset(dp,0,sizeof(dp));
	    for(int i=0;i<=n;i++)
	       for(int j=0;j<=m;j++)
           {
               if(i==0 || j==0)
                   dp[i][j] = 0;
               else if(s1[i-1] == s2[j-1])
	                dp[i][j] = dp[i-1][j-1]+1;
	           else
	                dp[i][j] = max(dp[i][j-1], dp[i-1][j]);        
           } 
        
        //trace back to find the subsequence string 
        string res = "";
        int i = n, j = m; 
        while (i > 0 && j > 0) 
        { 
          if (s1[i-1] == s2[j-1]) 
          { 
              res = s1[i-1] + res;
              i--; j--;
          } 
          else if (dp[i-1][j] > dp[i][j-1]) 
             i--; 
          else
             j--; 
        } 
        return res;
        
    }
    
    string shortestCommonSupersequence(string str1, string str2) {
        int n = str1.size() , m = str2.size() ;
        string sub = lcs(str1, str2,n,m);
        string res = "";
        int len = sub.size();
        int sub_idx = 0;
        int s1 =0 , s2 = 0;
        //iterate over both the strings and include the subseq only once 
        while(sub_idx < len){
            if(s1<n && s2<m && str1[s1] == sub[sub_idx] && str2[s2] == sub[sub_idx])
            {
                res += sub[sub_idx];
                sub_idx++;
                s1++;
                s2++;
            }
            else 
            {
                if(s1 < n && str1[s1]!=sub[sub_idx])
                    res += str1[s1++];
                if(s2 < m && str2[s2]!=sub[sub_idx])
                    res += str2[s2++];
            }
        }
        //iterate over the left over letters after subsequnece string SUB is over 
        while(s1<n)
            res += str1[s1++];
        while(s2<m)
            res += str2[s2++];
        
        return res;
        //final result
    }
};
